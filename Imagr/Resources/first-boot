#!/usr/bin/python
import socket
import logging
import time
import plistlib
import os
import subprocess
import shutil

firstboot_dir = '/usr/local/first-boot'
config_plist = os.path.join(firstboot_dir, 'config.plist')
items_dir = os.path.join(firstboot_dir, 'items')
items_done = None
installer = '/usr/sbin/installer'
logfile = '/var/log/first-boot.log'

# Logging Config
log = logging.getLogger('imagr-first-boot')
log.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(message)s')
handler_stream = logging.StreamHandler()
handler_stream.setFormatter(formatter)
handler_stream.setLevel(logging.ERROR)
log.addHandler(handler_stream)
handler_file = logging.FileHandler(logfile)
handler_file.setFormatter(formatter)
log.addHandler(handler_file)

def ip_addresses():
    command = "ifconfig  | grep -E 'inet.[0-9]' | grep -v '127.0.0.1' | awk '{ print $2}' | wc -l"
    proc = subprocess.Popen(command, shell=True,stdout=subprocess.PIPE)
    return proc.communicate()[0].replace('\n', '')

def all_done():
    if not os.listdir(items_dir):
        sleep_time=10
        time.sleep(sleep_time)
        cleanup()
        subprocess.call(['/sbin/reboot'])

def cleanup():
    log_path = open(logfile, 'a')
    log.info('No more packages or scripts have been found, cleaning up.')
    # remove launchdaemon
    os.remove('/Library/LaunchDaemons/com.grahamgilbert.first-boot-pkg.plist')
    # remove launchagent
    os.remove('/Library/LaunchAgents/se.gu.it.LoginLog.plist')
    # remove loginlog.app
    shutil.rmtree('/Library/PrivilegedHelperTools/LoginLog.app')
    # remove firstboot_dir
    shutil.rmtree(firstboot_dir)

def main():
    log.info(('''
######################################################
Imagr First Boot %s
######################################################
''') % time.strftime("%Y-%m-%d %H:%M:%S"))
    plist_opts = plistlib.readPlist(config_plist)
    
    #Disable sleep
    subprocess.call(["/usr/bin/pmset", "-a", "sleep", "0", "displaysleep", "0"])
    
    # Detect new network hardware
    subprocess.call(['/usr/sbin/networksetup', '-detectnewhardware'])
    if plist_opts.get('Network') == True:
        # Check if the network is up
        while True:
            print ip_addresses()
            if ip_addresses().strip() != "0":
                log.info('Network connection is active. ')
                break
            else:
                log.info('Network connection is inactive, retrying...')
                time.sleep(10)
    retry_limit = plist_opts.get('RetryCount')
    # if the packages dir isn't empty, loop over them
    if not os.path.exists(items_dir):
        os.makedirs(items_dir)

    sleep_time = 20
    if os.listdir(items_dir):
        # We're installing, wait to see the output
        for item in os.listdir(items_dir):
            if item.endswith(".pkg") or item.endswith(".mpkg"):
                log.info(('Installing %s...') % item)
                package_path = os.path.join(items_dir, item)
                command = [installer, '-pkg', package_path, '-target', '/']
                # check if we've reached the retry limit
                retry_key = item + '_count'
                retry_count = plist_opts.get(retry_key, 0)
                if retry_count <= retry_limit:
                    log_path = open(logfile, 'a')  # so that data written to it will be appended
                    task = subprocess.Popen(command, stdout=log_path, stderr=log_path)
                    task.communicate()
                    if task.returncode == 0:
                        # Package installed ok, we're good to remove it
                        log.info(('%s installed successfully.') % item)
                        try:
                            os.remove(package_path)
                        except:
                            shutil.rmtree(package_path)
                    else:
                        log.info(('%s didn\'t install successfully. Will retry on next boot.') % package)
                        retry_count = retry_count + 1
                        plist_opts[retry_key] = retry_count
                        plistlib.writePlist(plist_opts, os.path.join(firstboot_dir, 'config.plist'))
                else:
                    log.info(('Error limit for %s has been reached, removing the package.') % package)
                    try:
                        os.remove(package_path)
                    except:
                        shutil.rmtree(package_path)
            else:
                log.info(('Running %s...') % item)
                script_path = os.path.join(items_dir, item)
                log_path = open(logfile, 'a')  # so that data written to it will be appended
                task = subprocess.Popen(script_path, stdout=log_path, stderr=log_path, shell=True)
                task.communicate()
                try:
                    os.remove(script_path)
                except:
                    shutil.rmtree(script_path)
            all_done()

    # We're done, reboot. Wait 20 seconds so the log window can be read.
    time.sleep(sleep_time)
    all_done()
    subprocess.call(['/sbin/reboot'])

if __name__ == '__main__':
    main()
